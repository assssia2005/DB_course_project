import sqlite3
import graphviz
import os
import subprocess

DB_FILE = "library.db"
SHOWCASE_SCRIPT = "showcase_db.py"
OUTPUT_FILENAME = "library_erd"

def ensure_db_exists():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç """
    if not os.path.exists(DB_FILE):
        print(f"–§–∞–π–ª '{DB_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é '{SHOWCASE_SCRIPT}' –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è...")
        try:
            subprocess.run(["python3", SHOWCASE_SCRIPT], check=True)
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    return True

def get_schema_details(conn):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö, –∫–æ–ª–æ–Ω–∫–∞—Ö –∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö –∏–∑ –ë–î.
    """
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';")
    tables = [row[0] for row in cursor.fetchall()]

    schema = {'tables': {}, 'relations': []}

    for table_name in tables:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        cursor.execute(f"PRAGMA table_info('{table_name}');")
        columns = []
        for row in cursor.fetchall():
            # cid, name, type, notnull, dflt_value, pk
            columns.append({'name': row[1], 'type': row[2], 'pk': bool(row[5])})
        schema['tables'][table_name] = columns

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö
        cursor.execute(f"PRAGMA foreign_key_list('{table_name}');")
        for row in cursor.fetchall():
            # id, seq, table, from, to, on_update, on_delete, match
            schema['relations'].append({
                'from_table': table_name,
                'from_col': row[3],
                'to_table': row[2],
                'to_col': row[4]
            })

    return schema

def generate_diagram(schema, output_filename):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ERD-–¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã.
    """
    dot = graphviz.Digraph('ERD', comment='Library DB Schema')
    dot.attr('graph',
             rankdir='LR',  # –°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
             splines='ortho',
             nodesep='1.0',
             ranksep='1.5',
             fontname='Arial')
    dot.attr('node', shape='plain', fontname='Arial')
    dot.attr('edge', fontname='Arial', fontsize='10')

    # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for table_name, columns in schema['tables'].items():
        # –°–æ–±–∏—Ä–∞–µ–º HTML-–ø–æ–¥–æ–±–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        rows = [f'<tr><td bgcolor="#336699" colspan="3"><font color="white"><b>{table_name}</b></font></td></tr>']
        for col in columns:
            pk_symbol = 'üîë' if col['pk'] else ''
            rows.append(f'<tr><td align="left">{pk_symbol} {col["name"]}</td><td align="left">{col["type"]}</td></tr>')

        label = f'<<table border="1" cellborder="1" cellspacing="0">{"".join(rows)}</table>>'
        dot.node(table_name, label=label)

    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    for relation in schema['relations']:
        dot.edge(
            relation['from_table'],
            relation['to_table'],
            label=f"{relation['from_col']} ‚Üí {relation['to_col']}",
            tailport='e', # —Ö–≤–æ—Å—Ç –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
            headport='w' # –≥–æ–ª–æ–≤–∞ –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        )

    # –†–µ–Ω–¥–µ—Ä–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    try:
        dot.render(output_filename, format='png', view=False, cleanup=True)
        print(f"–î–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {output_filename}.png")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Graphviz —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ (–Ω–µ —Ç–æ–ª—å–∫–æ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞).")

def main():
    """ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è """
    if not ensure_db_exists():
        return

    conn = sqlite3.connect(DB_FILE)
    try:
        schema = get_schema_details(conn)
        generate_diagram(schema, OUTPUT_FILENAME)
    finally:
        conn.close()

if __name__ == "__main__":
    main()
